---1---
select nome as Cliente
from cliente natural join pessoa;

---2---
select nome , cargo , salario
from funcionario natural join pessoa;

---3---
select *
from pecaacessorio
where codigo = '001';

---4----
select sum(quantTotal) as Quantidade 
from estoque;


---6---
select hora , disponibilidade
from agendamento a, funcionarioAgenda fa
where a.id = fa.idagenda and a.data = '02/02/2017';


---7---
select *
from funcionarioAgenda fa , clienteAgenda ca 
where fa.idagenda = ca.idagenda and disponibilidade = true;

---8---
select *
from fornecedor
order by nomeEmpresa asc;

---9---
select p.nome as Funcionario
from ponto po , funcionario f , pessoa p
where f.cpf = po.cpffuncionario and p.cpf = f.cpf and po.data = '21/02/2017';



---10---
select *
from pessoa 
where rua is null;


---11---
create or replace view clienteFuncionario
as
select p.nome
from funcionario f , pessoa p
where f.cpf = p.cpf and exists
(
 select *
 from cliente c
 where f.cpf = c.cpf
);

--12---
select  f.cnpj , f.nomeEmpresa
from fornecedor f natural join fornecedorpecaacessorio fp
group by f.cnpj , f.nomeEmpresa
having count(*) >=2;

---13---
select titular
from vendaCheque
group by titular
having count(*)>=2;

--14 --
create or replace view ValorTotalVendaCheque
as(
  select sum(valor) as Valor_Total
  from vendaCheque 
);

--15 --
create or replace view ValorTotalVendaCartao
as(
  select sum(valor) as Valor_Total
  from vendaCartao
);

-- 16 ---
select *
from pessoa 
where cidade like '%CE'
order by nome;


-- 17 --
select *
from pessoa p
where nome like'%Teixeira';


--18--
create or replace function SomaVendas() 
returns real 
as
$$
declare 
 totalCheque vendaCheque.valor%type; 
 totalCartao vendaCartao.valor%type;
begin
 select into totalCheque *
 from ValorTotalVendaCheque;
 
 select into totalCartao *
 from ValorTotalVendaCartao;

 return totalCartao + TotalCheque;
end
$$ language plpgsql;
select somaVendas();

--19--
create or replace function quantEmpregado(int)
returns numeric(2) 
as $$
declare
 NumDep alias for $1;
 folhaPagamento numeric(2):=0;
begin
 select into folhaPagamento avg(salario) as Folha_De_Pagamento
 from departamento d join funcionario f  on (d.codigo = f.codDepartamento)
 where d.codigo = numDep;
 return folhaPagamento;
end
$$ language plpgsql;

--20--
select cpfCliente
from clienteAgenda
where exists 
(
 select cpf
 from cliente
);


--21--
create or replace function agendamentos(date)
returns varchar
as
$$
declare 
dataPassada alias for $1;
cliente varchar ;
begin
  select into cliente p.nome
  from pessoa p ,clienteAgenda ca , agendamento a join FuncionarioAgenda fa on fa.idAgenda = a.id 
  where p.cpf = ca.cpfCliente and ca.idAgenda = a.id and disponibilidade = true and a.data = dataPassada;
  return cliente;
end
$$ language plpgsql;


-- 22 --
--Função de Gatilho da questao 22--
create or replace function atualizaEstoque()
returns trigger 
as
$$
declare 
 quantidade int:=0;
begin
 select into quantidade quantTotal
 from estoque 
 where new.idEstoque = id;
 update estoque set quantTotal = quantidade+1
 where new.idEstoque = id;
 return new;
end
$$ language plpgsql;

--Gatilho da questao 22--
create trigger atualizaEstoque
after insert on pecaAcessorio
for each row 
 execute procedure atualizaEstoque();

--23--
--Funçao do Gatilho da questao 23
CREATE OR REPLACE FUNCTION limitegerente()
  RETURNS trigger AS
$$
declare 
 func departamento.cpfGerente%type;
 quantidade int:=0;
begin
 select into quantidade count(*)
 from departamento
 group by cpfGerente
 having cpfGerente = new.cpfGerente;

 if(quantidade >=1) then return null ;
 else	select into func cpf
	from funcionario 
	where cpf = new.cpfGerente;
 end if;
end $$ LANGUAGE plpgsql;

--Gatilho da questao 23--
create trigger limitegerente
before insert on departamento
for each row 
 execute procedure limitegerente();
